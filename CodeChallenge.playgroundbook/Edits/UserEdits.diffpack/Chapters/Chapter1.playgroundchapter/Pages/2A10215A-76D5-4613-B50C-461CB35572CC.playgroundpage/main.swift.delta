<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

/*
 Given an array of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates). For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer:
 */
var input: [String] = ["cool","lock","cook"] 
var output: Set&lt;Character&gt; = []

func filterUniqueCharacters(_ input: [String]){ 
  
  var arrayOfSets: [Set&lt;Character&gt;] = []

  // make each element in the array a Set
  for element in input { 
    let set = Set(element)
    arrayOfSets.append(set)
    
   guard let firstSet = arrayOfSets.first else { 
     fatalError()
   }
   
   let out: Set&lt;Character&gt; = firstSet.filter { character in 
    arrayOfSets.allSatisfy { $0.contains(character)}
   }
   output = out
  }
}

let _ = filterUniqueCharacters(input)
print(output)
</string>
			<key>ModifiedRange</key>
			<string>{0, 902}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>

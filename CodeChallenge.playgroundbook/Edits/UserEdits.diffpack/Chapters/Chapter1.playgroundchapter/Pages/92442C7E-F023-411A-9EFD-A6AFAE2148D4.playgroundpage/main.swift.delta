<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 &lt;= nums.length &lt;= 104
-109 &lt;= nums[i] &lt;= 109
-109 &lt;= target &lt;= 109
*/

import Foundation 

print ("Hello world")

func numSums(_ input: [Int], _ target: Int) -&gt; (Int, Int)? { 
    let enumeratedInput = input.enumerated()
// for loop through each item in array
    for (index, item) in enumeratedInput { 
        let remainder = abs(target - item)
        if let secondIndex = input.firstIndex(of: remainder) { 
            return (index, secondIndex)
        }
    }
return nil
}

func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] {
    var indexDict = [Int: Int]() // Dictionary to store value:index pairs

    for (index, value) in nums.enumerated() {
        let complement = target - value
        
        if let complementIndex = indexDict[complement] {
            return [complementIndex, index]
        }
        
        indexDict[value] = index
    }
    return []
}
let nums = [2,3,4]

print(numSums(nums, 6))

</string>
			<key>ModifiedRange</key>
			<string>{1, 1464}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//
//  ArraySearching.swift
//
//
//  Created by Matthew Carroll on 10/13/16.
//  Copyright Â© 2016 Third Cup lc. All rights reserved.
//

import Foundation

//: Similar to EnumerateGenerator, but returns the index of the element instead of a counter for the enumeration
public extension Collection {
    
    func indicesElements() -&gt; Zip2Sequence&lt;Indices, Self&gt; {
        return zip(indices, self)
    }
}

extension Zip2Sequence.Iterator: Sequence {
    
    public func makeIterator() -&gt; Zip2Sequence.Iterator {
        return self
    }
}

public extension Collection {
    
    func indexElementPairs() -&gt; Zip2Sequence&lt;Zip2Sequence&lt;Indices, Self&gt;.Iterator, Zip2Sequence&lt;Indices, Self&gt;.Iterator&gt; {
        let left = zip(indices, self).makeIterator()
        var right = left
        let _ = right.next()
        return zip(left, right)
    }
    
    func successiveElements() -&gt; Zip2Sequence&lt;Self, Self.SubSequence&gt; {
        return zip(self, self.dropFirst())
    }
}

public struct ElementPairsIterator&lt;T: Sequence&gt;: IteratorProtocol, Sequence {
    
    var iterator: T.Iterator
    
    init(sequence: T) {
        iterator = sequence.makeIterator()
    }
    
    mutating public func next() -&gt; (T.Element, T.Element)? {
        guard let left = iterator.next(), let right = iterator.next() else { return nil }
        return (left, right)
    }
    
    public func makeIterator() -&gt; ElementPairsIterator&lt;T&gt; {
        return self
    }
}


public extension Sequence {
    
    func elementPairs() -&gt; ElementPairsIterator&lt;Self&gt; {
        return ElementPairsIterator(sequence: self)
    }
}

public extension Collection {
    
    typealias IndexElementPair = (leftIndex: Index, leftElement: Iterator.Element, rightIndex: Index, rightElement: Iterator.Element)
    
    func successiveElements(where predicate: (_ previousElement: Iterator.Element, _ element: Iterator.Element) -&gt; Bool) -&gt; IndexElementPair? {
        for (left, right) in indexElementPairs() {
            guard predicate(left.1, right.1) else { continue }
            return (left.0, left.1, right.0, right.1)
        }
        return nil
    }
    
    func elementPair(where predicate: (_ previousElement: Element, _ element: Element) -&gt; Bool) -&gt; (Element, Element)? {
        return elementPairs().first(where: predicate)
    }
    
    func elementPair2(where predicate: (_ previousElement: Element, _ element: Element) -&gt; Bool) -&gt; (Element, Element)? {
        guard !isEmpty else { return nil }
        var i = startIndex
        var k = index(after: i)
        while k &lt; endIndex {
            let left = self[i]
            let right = self[k]
            guard predicate(left, right) else {
                i = k
                k = index(after: k)
                continue
            }
            return(left, right)
        }
        return nil
    }
}

public extension Collection {
    
    func unsortedRange(isUnordered: (_ left: Iterator.Element, _ right: Iterator.Element) -&gt; Bool) -&gt; ClosedRange&lt;Index&gt;? {
        guard let unsortedStart = successiveElements(where: isUnordered) else { return nil }
        
        var unsortedEnd = unsortedStart.leftIndex
        var unsortedMax = unsortedStart.leftElement
        let d = distance(from: startIndex, to: unsortedStart.rightIndex)
        
        for (i, x) in indicesElements().dropFirst(numericCast(d)) {
            if isUnordered(unsortedMax, x) {
                unsortedEnd = i
            }
            else {
                unsortedMax = x
            }
        }
        return unsortedStart.leftIndex...unsortedEnd
    }
}

public extension Collection {
    
    func groupBy&lt;Key&gt;(f: (Iterator.Element) -&gt; Key) -&gt; [Key: [Iterator.Element]] {
        var groups: [Key: [Iterator.Element]] = [:]
        for x in self {
            let key = f(x)
            var array = groups[key] ?? []
            array.append(x)
            groups[key] = array
        }
        return groups
    }
}

public extension Collection where Iterator.Element: Comparable, SubSequence: Collection {
    
    func maxElementIndex() -&gt; Index? {
        guard !self.isEmpty else { return nil }
        var prev = self[startIndex]
        var maxI = startIndex
        for (i, x) in dropFirst().indicesElements() {
            if x &gt; prev {
                prev = x
                maxI = i
            }
        }
        return maxI
    }
}

public extension Collection where Iterator.Element: Comparable, SubSequence: Collection {
    
    func minElementIndex() -&gt; Index? {
        guard !self.isEmpty else { return nil }
        var prev = self[startIndex]
        var minI = startIndex
        for (i, x) in dropFirst().indicesElements() {
            if x &lt; prev {
                prev = x
                minI = i
            }
        }
        return minI
    }
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 4811}</string>
			<key>OriginalContent</key>
			<string>// Code inside modules can be shared between pages and other source files.
</string>
			<key>OriginalRange</key>
			<string>{0, 75}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>

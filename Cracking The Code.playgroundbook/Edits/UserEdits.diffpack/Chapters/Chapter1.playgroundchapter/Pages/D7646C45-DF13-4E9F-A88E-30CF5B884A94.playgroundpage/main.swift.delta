<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/**
 1.1 Determine if a string has all unique characters. What if you can't use additional data structures?
 */

import Foundation 

let repeating = "helloThisStringHasRepeatingCharacters"
let unique = "TheUniq"


// When counting repeating elements.. are we counting both uppercase and lowercase differently?  
func hasRepeatingElements(input: String) -&gt; Bool { 
    
    let stringSet: Set = Set(input)
    if (stringSet.count != input.count) { return true }
    
    print(stringSet)
    return false
}

print("String input is \(repeating)... has repeating \(hasRepeatingElements(input: repeating))")


func hasRepeatingElementsCaseInsensitive(input: String) -&gt; Bool { 
    let caseInsensitiveInput = input.lowercased()
    let stringSet: Set = Set(caseInsensitiveInput)
    if (stringSet.count != caseInsensitiveInput.count) { return true }
    
    print(stringSet)
    return false
}

print("String input is \(repeating)... has repeating \(hasRepeatingElementsCaseInsensitive(input: repeating))")

print("String input is \(unique)... has repeating \(hasRepeatingElementsCaseInsensitive(input: unique))")


// No Set functions allowed?  
func hasRepeatingElementsHard(input: String) -&gt; Bool { 
    
    if (input.count &gt; 256) { return true }
    
    var characterDict: [Character: Bool] = [:]
    
    for character in input { 
        if (characterDict[character] == true) { 
            return true 
        }
        characterDict[character] = true; 
    }
    return false
}

print("String input is \(unique)... has repeating \(hasRepeatingElementsHard(input: unique))")
</string>
			<key>ModifiedRange</key>
			<string>{0, 1581}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
